diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/.helmignore packages/longhorn-crd/charts/.helmignore
--- packages/longhorn-crd/charts-original/.helmignore
+++ packages/longhorn-crd/charts/.helmignore
@@ -1,21 +0,0 @@
-# Patterns to ignore when building packages.
-# This supports shell glob matching, relative path matching, and
-# negation (prefixed with !). Only one pattern per line.
-.DS_Store
-# Common VCS dirs
-.git/
-.gitignore
-.bzr/
-.bzrignore
-.hg/
-.hgignore
-.svn/
-# Common backup files
-*.swp
-*.bak
-*.tmp
-*~
-# Various IDEs
-.project
-.idea/
-*.tmproj
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/Chart.yaml packages/longhorn-crd/charts/Chart.yaml
--- packages/longhorn-crd/charts-original/Chart.yaml
+++ packages/longhorn-crd/charts/Chart.yaml
@@ -1,27 +1,17 @@
 apiVersion: v1
-name: longhorn
+name: longhorn-crd
 version: 1.0.2
 appVersion: v1.0.2
 kubeVersion: ">=v1.14.0-r0"
-description: Longhorn is a distributed block storage system for Kubernetes.
-keywords:
-- longhorn
-- storage
-- distributed
-- block
-- device
-- iscsi
-home: https://github.com/longhorn/longhorn
-sources:
-- https://github.com/longhorn/longhorn
-- https://github.com/longhorn/longhorn-engine
-- https://github.com/longhorn/longhorn-instance-manager
-- https://github.com/longhorn/longhorn-manager
-- https://github.com/longhorn/longhorn-ui
-- https://github.com/longhorn/longhorn-tests
+description: Longhorn CustomResourceDefinitions
 maintainers:
 - name: Longhorn maintainers
   email: maintainers@longhorn.io
 - name: Sheng Yang
   email: sheng@yasker.org
-icon: https://raw.githubusercontent.com/cncf/artwork/master/projects/longhorn/icon/color/longhorn-icon-color.svg?sanitize=true
+icon: https://raw.githubusercontent.com/cncf/artwork/master/projects/longhorn/icon/color/longhorn-icon-color.svg
+annotations:
+  catalog.cattle.io/release-name: longhorn-crd
+  catalog.cattle.io/namespace: longhorn-system
+  catalog.cattle.io/certified: rancher
+  catalog.cattle.io/hidden: true
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/README.md packages/longhorn-crd/charts/README.md
--- packages/longhorn-crd/charts-original/README.md
+++ packages/longhorn-crd/charts/README.md
@@ -1,49 +0,0 @@
-# Rancher Longhorn Chart
-
-> **Important**: Please install Longhorn chart in `longhorn-system` namespace only.
-
-> **Warning**: Longhorn doesn't support downgrading from a higher version to a lower version.
-
-The following document pertains to running Longhorn from the Rancher 2.0 chart.
-
-## Source Code
-
-Longhorn is 100% open source software. Project source code is spread across a number of repos:
-
-1. Longhorn Engine -- Core controller/replica logic https://github.com/longhorn/longhorn-engine
-2. Longhorn Instance Manager -- Controller/replica instance lifecycle management https://github.com/longhorn/longhorn-instance-manager
-3. Longhorn Manager -- Longhorn orchestration, includes CSI driver for Kubernetes https://github.com/longhorn/longhorn-manager
-4. Longhorn UI -- Dashboard https://github.com/longhorn/longhorn-ui
-
-## Prerequisites
-
-1. Rancher v2.1+
-2. Docker v1.13+
-3. Kubernetes v1.14+
-4. Make sure `curl`, `findmnt`, `grep`, `awk` and `blkid` has been installed in all nodes of the Kubernetes cluster.
-5. Make sure `open-iscsi` has been installed in all nodes of the Kubernetes cluster. For GKE, recommended Ubuntu as guest OS image since it contains `open-iscsi` already.
-
-## Uninstallation
-
-1. To prevent damage to the Kubernetes cluster, we recommend deleting all Kubernetes workloads using Longhorn volumes (PersistentVolume, PersistentVolumeClaim, StorageClass, Deployment, StatefulSet, DaemonSet, etc).
-
-2. From Rancher UI, navigate to `Catalog Apps` tab and delete Longhorn app.
-
-## Troubleshooting
-
-### I deleted the Longhorn App from Rancher UI instead of following the uninstallation procedure
-
-Redeploy the (same version) Longhorn App. Follow the uninstallation procedure above.
-
-### Problems with CRDs
-
-If your CRD instances or the CRDs themselves can't be deleted for whatever reason, run the commands below to clean up. Caution: this will wipe all Longhorn state!
-
-```
-# Delete CRD instances and definitions
-curl -s https://raw.githubusercontent.com/longhorn/longhorn/v0.8.1/scripts/cleanup.sh |bash -s v062
-curl -s https://raw.githubusercontent.com/longhorn/longhorn/v0.8.1/scripts/cleanup.sh |bash -s v070
-```
-
----
-Please see [link](https://github.com/longhorn/longhorn) for more information.
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/app-readme.md packages/longhorn-crd/charts/app-readme.md
--- packages/longhorn-crd/charts-original/app-readme.md
+++ packages/longhorn-crd/charts/app-readme.md
@@ -1,11 +0,0 @@
-# Longhorn
-
-Longhorn is a lightweight, reliable and easy to use distributed block storage system for Kubernetes. Once deployed, users can leverage persistent volumes provided by Longhorn.
-
-Longhorn creates a dedicated storage controller for each volume and synchronously replicates the volume across multiple replicas stored on multiple nodes. The storage controller and replicas are themselves orchestrated using Kubernetes. Longhorn supports snapshots, backups and even allows you to schedule recurring snapshots and backups!
-
-**Important**: Please install Longhorn chart in `longhorn-system` namespace only.
-
-**Warning**: Longhorn doesn't support downgrading from a higher version to a lower version.
-
-[Chart Documentation](https://github.com/longhorn/longhorn/blob/master/chart/README.md)
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/questions.yml packages/longhorn-crd/charts/questions.yml
--- packages/longhorn-crd/charts-original/questions.yml
+++ packages/longhorn-crd/charts/questions.yml
@@ -1,346 +0,0 @@
-categories:
-- storage
-namespace: longhorn-system
-questions:
-- variable: image.defaultImage
-  default: "true"
-  description: "Use default Longhorn images"
-  label: Use Default Images
-  type: boolean
-  show_subquestion_if: false
-  group: "Longhorn Images"
-  subquestions:
-  - variable: image.longhorn.manager
-    default: longhornio/longhorn-manager
-    description: "Specify Longhorn Manager Image Name"
-    type: string
-    label: Longhorn Manager Image Name
-    group: "Longhorn Images Settings"
-  - variable: image.longhorn.managerTag
-    default: v1.0.2
-    description: "Specify Longhorn Manager Image Tag"
-    type: string
-    label: Longhorn Manager Image Tag
-    group: "Longhorn Images Settings"
-  - variable: image.longhorn.engine
-    default: longhornio/longhorn-engine
-    description: "Specify Longhorn Engine Image Name"
-    type: string
-    label: Longhorn Engine Image Name
-    group: "Longhorn Images Settings"
-  - variable: image.longhorn.engineTag
-    default: v1.0.2
-    description: "Specify Longhorn Engine Image Tag"
-    type: string
-    label: Longhorn Engine Image Tag
-    group: "Longhorn Images Settings"
-  - variable: image.longhorn.ui
-    default:  longhornio/longhorn-ui
-    description: "Specify Longhorn UI Image Name"
-    type: string
-    label: Longhorn UI Image Name
-    group: "Longhorn Images Settings"
-  - variable: image.longhorn.uiTag
-    default: v1.0.2
-    description: "Specify Longhorn UI Image Tag"
-    type: string
-    label: Longhorn UI Image Tag
-    group: "Longhorn Images Settings"
-  - variable: image.longhorn.instanceManager
-    default: longhornio/longhorn-instance-manager
-    description: "Specify Longhorn Instance Manager Image Name"
-    type: string
-    label: Longhorn Instance Manager Image Name
-    group: "Longhorn Images Settings"
-  - variable: image.longhorn.instanceManagerTag
-    default: v1_20200514
-    description: "Specify Longhorn Instance Manager Image Tag"
-    type: string
-    label: Longhorn Instance Manager Image Tag
-    group: "Longhorn Images Settings"
-  - variable: csi.attacherImage
-    default: longhornio/csi-attacher
-    description: "Specify CSI attacher image. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Attacher Image
-    group: "Longhorn CSI Driver Images"
-  - variable: csi.attacherImageTag
-    default: v2.0.0
-    description: "Specify CSI attacher image tag. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Attacher Image Tag
-    group: "Longhorn CSI Driver Images"
-  - variable: csi.provisionerImage
-    default: longhornio/csi-provisioner
-    description: "Specify CSI provisioner image. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Provisioner Image
-    group: "Longhorn CSI Driver Images"
-  - variable: csi.provisionerImageTag
-    default: v1.4.0
-    description: "Specify CSI provisioner image tag. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Provisioner Image Tag
-    group: "Longhorn CSI Driver Images"
-  - variable: csi.nodeDriverRegistrarImage
-    default: longhornio/csi-node-driver-registrar
-    description: "Specify CSI Node Driver Registrar image. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Node Driver Registrar Image
-    group: "Longhorn CSI Driver Images"
-  - variable: csi.nodeDriverRegistrarImageTag
-    default: v1.2.0
-    description: "Specify CSI Node Driver Registrar image tag. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Node Driver Registrar Image Tag
-    group: "Longhorn CSI Driver Images"
-  - variable: csi.resizerImage
-    default: longhornio/csi-resizer
-    description: "Specify CSI Driver Resizer image. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Driver Resizer Image
-    group: "Longhorn CSI Driver Images"
-  - variable: csi.resizerImageTag
-    default: v0.3.0
-    description: "Specify CSI Driver Resizer image tag. Leave blank to autodetect."
-    type: string
-    label: Longhorn CSI Driver Resizer Image Tag
-    group: "Longhorn CSI Driver Images"
-- variable: privateRegistry.registryUrl
-  label: Private registry URL
-  description: "URL of private registry"
-  group: "Private Registry Settings"
-  type: string
-  default: ""
-- variable: privateRegistry.registryUser
-  label: Private registry user
-  description: "User used to authenticate to private registry"
-  group: "Private Registry Settings"
-  type: string
-  default: ""
-- variable: privateRegistry.registryPasswd
-  label: Private registry password
-  description: "Password used to authenticate to private registry"
-  group: "Private Registry Settings"
-  type: password
-  default: ""
-- variable: longhorn.default_setting
-  default: "false"
-  description: "Customize the default settings before installing Longhorn for the first time. This option will only work if the cluster hasn't installed Longhorn."
-  label: "Customize Default Settings"
-  type: boolean
-  show_subquestion_if: true
-  group: "Longhorn Default Settings"
-  subquestions:
-  - variable: defaultSettings.registrySecret
-    label: Private registry secret
-    description: "The Kubernetes Secret name"
-    group: "Longhorn Default Settings"
-    type: string
-    default: ""
-  - variable: csi.kubeletRootDir
-    default:
-    description: "Specify kubelet root-dir. Leave blank to autodetect."
-    type: string
-    label: Kubelet Root Directory
-    group: "Longhorn CSI Driver Settings"
-  - variable: csi.attacherReplicaCount
-    type: int
-    default:
-    min: 1
-    max: 10
-    description: "Specify replica count of CSI Attacher. By default 3."
-    label: Longhorn CSI Attacher replica count
-    group: "Longhorn CSI Driver Settings"
-  - variable: csi.provisionerReplicaCount
-    type: int
-    default:
-    min: 1
-    max: 10
-    description: "Specify replica count of CSI Provisioner. By default 3."
-    label: Longhorn CSI Provisioner replica count
-    group: "Longhorn CSI Driver Settings"
-  - variable: persistence.defaultClass
-    default: "true"
-    description: "Set as default StorageClass"
-    group: "Longhorn CSI Driver Settings"
-    type: boolean
-    required: true
-    label: Default Storage Class
-  - variable: persistence.defaultClassReplicaCount
-    description: "Set replica count for default StorageClass"
-    group: "Longhorn CSI Driver Settings"
-    type: int
-    default: 3
-    min: 1
-    max: 10
-    label: Default Storage Class Replica Count
-  - variable: defaultSettings.backupTarget
-    label: Backup Target
-    description: "The endpoint used to access the backupstore. NFS and S3 are supported."
-    group: "Longhorn Default Settings"
-    type: string
-    default:
-  - variable: defaultSettings.backupTargetCredentialSecret
-    label: Backup Target Credential Secret
-    description: "The name of the Kubernetes secret associated with the backup target."
-    group: "Longhorn Default Settings"
-    type: string
-    default:
-  - variable: defaultSettings.createDefaultDiskLabeledNodes
-    label: Create Default Disk on Labeled Nodes
-    description: 'Create default Disk automatically only on Nodes with the label "node.longhorn.io/create-default-disk=true" if no other disks exist. If disabled, the default disk will be created on all new nodes when each node is first added.'
-    group: "Longhorn Default Settings"
-    type: boolean
-    default: "false"
-  - variable: defaultSettings.defaultDataPath
-    label: Default Data Path
-    description: 'Default path to use for storing data on a host. By default "/var/lib/longhorn/"'
-    group: "Longhorn Default Settings"
-    type: string
-    default: "/var/lib/longhorn/"
-  - variable: defaultSettings.replicaSoftAntiAffinity
-    label: Replica Node Level Soft Anti-Affinity
-    description: 'Allow scheduling on nodes with existing healthy replicas of the same volume. By default false.'
-    group: "Longhorn Default Settings"
-    type: boolean
-    default: "false"
-  - variable: defaultSettings.storageOverProvisioningPercentage
-    label: Storage Over Provisioning Percentage
-    description: "The over-provisioning percentage defines how much storage can be allocated relative to the hard drive's capacity. By default 200."
-    group: "Longhorn Default Settings"
-    type: int
-    min: 0
-    default: 200
-  - variable: defaultSettings.storageMinimalAvailablePercentage
-    label: Storage Minimal Available Percentage
-    description: "If the minimum available disk capacity exceeds the actual percentage of available disk capacity, the disk becomes unschedulable until more space is freed up. By default 25."
-    group: "Longhorn Default Settings"
-    type: int
-    min: 0
-    max: 100
-    default: 25
-  - variable: defaultSettings.upgradeChecker
-    label: Enable Upgrade Checker
-    description: 'Upgrade Checker will check for new Longhorn version periodically. When there is a new version available, a notification will appear in the UI. By default true.'
-    group: "Longhorn Default Settings"
-    type: boolean
-    default: "true"
-  - variable: defaultSettings.defaultReplicaCount
-    label: Default Replica Count
-    description: "The default number of replicas when a volume is created from the Longhorn UI. For Kubernetes configuration, update the `numberOfReplicas` in the StorageClass. By default 3."
-    group: "Longhorn Default Settings"
-    type: int
-    min: 1
-    max: 20
-    default: 3
-  - variable: defaultSettings.guaranteedEngineCPU
-    label: Guaranteed Engine CPU
-    description: 'Allow Longhorn Instance Managers to have guaranteed CPU allocation. The value is how many CPUs should be reserved for each Engine/Replica Instance Manager Pod created by Longhorn. For example, 0.1 means one-tenth of a CPU. This will help maintain engine stability during high node workload. It only applies to the Engine/Replica Manager Pods created after the setting took effect.
-WARNING: After this setting is changed, all the instance managers on all the nodes will be automatically restarted.
-WARNING: DO NOT CHANGE THIS SETTING WITH ATTACHED VOLUMES.
-By default 0.25.'
-    group: "Longhorn Default Settings"
-    type: float
-    default: 0.25
-  - variable: defaultSettings.defaultLonghornStaticStorageClass
-    label: Default Longhorn Static StorageClass Name
-    description: "The 'storageClassName' is given to PVs and PVCs that are created for an existing Longhorn volume. The StorageClass name can also be used as a label, so it is possible to use a Longhorn StorageClass to bind a workload to an existing PV without creating a Kubernetes StorageClass object. By default 'longhorn-static'."
-    group: "Longhorn Default Settings"
-    type: string
-    default: "longhorn-static"
-  - variable: defaultSettings.backupstorePollInterval
-    label: Backupstore Poll Interval
-    description: "In seconds. The backupstore poll interval determines how often Longhorn checks the backupstore for new backups. Set to 0 to disable the polling. By default 300."
-    group: "Longhorn Default Settings"
-    type: int
-    min: 0
-    default: 300
-  - variable: defaultSettings.taintToleration
-    label: Kubernetes Taint Toleration
-    description: 'To dedicate nodes to store Longhorn replicas and reject other general workloads, set tolerations for Longhorn and add taints for the storage nodes. All Longhorn volumes should be detached before modifying toleration settings. We recommend setting tolerations during Longhorn deployment because the Longhorn system cannot be operated during the update. Multiple tolerations can be set here, and these tolerations are separated by semicolon. For example, `key1=value1:NoSchedule; key2:NoExecute`. Because `kubernetes.io` is used as the key of all Kubernetes default tolerations, it should not be used in the toleration settings.
-WARNING: DO NOT CHANGE THIS SETTING WITH ATTACHED VOLUMES.'
-    group: "Longhorn Default Settings"
-    type: string
-    default: ""
-  - variable: defaultSettings.priorityClass
-    label: Priority Class
-    description: "The name of the Priority Class to set on the Longhorn workloads. This can help prevent Longhorn workloads from being evicted under Node Pressure. WARNING: DO NOT CHANGE THIS SETTING WITH ATTACHED VOLUMES."
-    group: "Longhorn Default Settings"
-    type: string
-    default: ""
-  - variable: defaultSettings.autoSalvage
-    label: Automatic salvage
-    description: "If enabled, volumes will be automatically salvaged when all the replicas become faulty e.g. due to network disconnection. Longhorn will try to figure out which replica(s) are usable, then use them for the volume. By default true."
-    group: "Longhorn Default Settings"
-    type: boolean
-    default: "true"
-  - variable: defaultSettings.disableSchedulingOnCordonedNode
-    label: Disable Scheduling On Cordoned Node
-    description: "Disable Longhorn manager to schedule replica on Kubernetes cordoned node. By default true."
-    group: "Longhorn Default Settings"
-    type: boolean
-    default: "true"
-  - variable: defaultSettings.replicaZoneSoftAntiAffinity
-    label: Replica Zone Level Soft Anti-Affinity
-    description: "Allow scheduling new Replicas of Volume to the Nodes in the same Zone as existing healthy Replicas. Nodes don't belong to any Zone will be treated as in the same Zone. By default true."
-    group: "Longhorn Default Settings"
-    type: boolean
-    default: "true"
-  - variable: defaultSettings.volumeAttachmentRecoveryPolicy
-    label: Volume Attachment Recovery Policy
-    description: "Defines the Longhorn action when a Volume is stuck with a Deployment Pod on a failed node. `wait` leads to the deletion of the volume attachment as soon as the pods deletion time has passed. `never` is the default Kubernetes behavior of never deleting volume attachments on terminating pods. `immediate` leads to the deletion of the volume attachment as soon as all workload pods are pending. By default wait."
-    group: "Longhorn Default Settings"
-    type: enum
-    options:
-      - "wait"
-      - "never"
-      - "immediate"
-    default: "wait"
-  - variable: defaultSettings.mkfsExt4Parameters
-    label: Custom mkfs.ext4 parameters
-    description: "Allows setting additional filesystem creation parameters for ext4. For older host kernels it might be necessary to disable the optional ext4 metadata_csum feature by specifying `-O ^64bit,^metadata_csum`."
-    group: "Longhorn Default Settings"
-    type: string
-- variable: ingress.enabled
-  default: "false"
-  description: "Expose app using Layer 7 Load Balancer - ingress"
-  type: boolean
-  group: "Services and Load Balancing"
-  label: Expose app using Layer 7 Load Balancer
-  show_subquestion_if: true
-  subquestions:
-  - variable: ingress.host
-    default: "xip.io"
-    description: "layer 7 Load Balancer hostname"
-    type: hostname
-    required: true
-    label: Layer 7 Load Balancer Hostname
-- variable: service.ui.type
-  default: "Rancher-Proxy"
-  description: "Define Longhorn UI service type"
-  type: enum
-  options:
-    - "ClusterIP"
-    - "NodePort"
-    - "LoadBalancer"
-    - "Rancher-Proxy"
-  label: Longhorn UI Service
-  show_if: "ingress.enabled=false"
-  group: "Services and Load Balancing"
-  show_subquestion_if: "NodePort"
-  subquestions:
-  - variable: service.ui.nodePort
-    default: ""
-    description: "NodePort port number(to set explicitly, choose port between 30000-32767)"
-    type: int
-    min: 30000
-    max: 32767
-    show_if: "service.ui.type=NodePort||service.ui.type=LoadBalancer"
-    label: UI Service NodePort number
-- variable: enablePSP
-  default: "true"
-  description: "Setup a pod security policy for Longhorn workloads."
-  label: Pod Security Policy
-  type: boolean
-  group: "Other Settings"
\ No newline at end of file
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/NOTES.txt packages/longhorn-crd/charts/templates/NOTES.txt
--- packages/longhorn-crd/charts-original/templates/NOTES.txt
+++ packages/longhorn-crd/charts/templates/NOTES.txt
@@ -1,5 +0,0 @@
-Longhorn is now installed on the cluster!
-
-Please wait a few minutes for other Longhorn components such as CSI deployments, Engine Images, and Instance Managers to be initialized.
-
-Visit our documentation at https://longhorn.io/docs/
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/_helpers.tpl packages/longhorn-crd/charts/templates/_helpers.tpl
--- packages/longhorn-crd/charts-original/templates/_helpers.tpl
+++ packages/longhorn-crd/charts/templates/_helpers.tpl
@@ -6,26 +6,6 @@
 {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
 {{- end -}}
 
-{{/*
-Create a default fully qualified app name.
-We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
-*/}}
-{{- define "longhorn.fullname" -}}
-{{- $name := default .Chart.Name .Values.nameOverride -}}
-{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
-{{- end -}}
-
-
-{{- define "longhorn.managerIP" -}}
-{{- $fullname := (include "longhorn.fullname" .) -}}
-{{- printf "http://%s-backend:9500" $fullname | trunc 63 | trimSuffix "-" -}}
-{{- end -}}
-
-
-{{- define "secret" }}
-{{- printf "{\"auths\": {\"%s\": {\"auth\": \"%s\"}}}" .Values.privateRegistry.registryUrl (printf "%s:%s" .Values.privateRegistry.registryUser .Values.privateRegistry.registryPasswd | b64enc) | b64enc }}
-{{- end }}
-
 {{- /*
 longhorn.labels generates the standard Helm labels.
 */ -}}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/clusterrole.yaml packages/longhorn-crd/charts/templates/clusterrole.yaml
--- packages/longhorn-crd/charts-original/templates/clusterrole.yaml
+++ packages/longhorn-crd/charts/templates/clusterrole.yaml
@@ -1,40 +0,0 @@
-apiVersion: rbac.authorization.k8s.io/v1
-kind: ClusterRole
-metadata:
-  name: longhorn-role
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-rules:
-- apiGroups:
-  - apiextensions.k8s.io
-  resources:
-  - customresourcedefinitions
-  verbs:
-  - "*"
-- apiGroups: [""]
-  resources: ["pods", "events", "persistentvolumes", "persistentvolumeclaims","persistentvolumeclaims/status", "nodes", "proxy/nodes", "pods/log", "secrets", "services", "endpoints", "configmaps"]
-  verbs: ["*"]
-- apiGroups: [""]
-  resources: ["namespaces"]
-  verbs: ["get", "list"]
-- apiGroups: ["apps"]
-  resources: ["daemonsets", "statefulsets", "deployments"]
-  verbs: ["*"]
-- apiGroups: ["batch"]
-  resources: ["jobs", "cronjobs"]
-  verbs: ["*"]
-- apiGroups: ["scheduling.k8s.io"]
-  resources: ["priorityclasses"]
-  verbs: ["watch", "list"]
-- apiGroups: ["storage.k8s.io"]
-  resources: ["storageclasses", "volumeattachments", "csinodes", "csidrivers"]
-  verbs: ["*"]
-- apiGroups: ["coordination.k8s.io"]
-  resources: ["leases"]
-  verbs: ["get", "watch", "list", "delete", "update", "create"]
-- apiGroups: ["longhorn.io"]
-  resources: ["volumes", "volumes/status", "engines", "engines/status", "replicas", "replicas/status", "settings",
-              "engineimages", "engineimages/status", "nodes", "nodes/status", "instancemanagers", "instancemanagers/status"]
-  verbs: ["*"]
-- apiGroups: ["coordination.k8s.io"]
-  resources: ["leases"]
-  verbs: ["*"]
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/clusterrolebinding.yaml packages/longhorn-crd/charts/templates/clusterrolebinding.yaml
--- packages/longhorn-crd/charts-original/templates/clusterrolebinding.yaml
+++ packages/longhorn-crd/charts/templates/clusterrolebinding.yaml
@@ -1,13 +0,0 @@
-apiVersion: rbac.authorization.k8s.io/v1
-kind: ClusterRoleBinding
-metadata:
-  name: longhorn-bind
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-roleRef:
-  apiGroup: rbac.authorization.k8s.io
-  kind: ClusterRole
-  name: longhorn-role
-subjects:
-- kind: ServiceAccount
-  name: longhorn-service-account
-  namespace: {{ .Release.Namespace }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/daemonset-sa.yaml packages/longhorn-crd/charts/templates/daemonset-sa.yaml
--- packages/longhorn-crd/charts-original/templates/daemonset-sa.yaml
+++ packages/longhorn-crd/charts/templates/daemonset-sa.yaml
@@ -1,128 +0,0 @@
-apiVersion: apps/v1
-kind: DaemonSet
-metadata:
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-    app: longhorn-manager
-  name: longhorn-manager
-  namespace: {{ .Release.Namespace }}
-spec:
-  selector:
-    matchLabels:
-      app: longhorn-manager
-  template:
-    metadata:
-      labels: {{- include "longhorn.labels" . | nindent 8 }}
-        app: longhorn-manager
-    spec:
-      containers:
-      - name: longhorn-manager
-    {{- if .Values.privateRegistry.registryUrl }}
-        image: "{{ .Values.privateRegistry.registryUrl }}/{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- else }}
-        image: "{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- end }}
-        imagePullPolicy: IfNotPresent
-        securityContext:
-          privileged: true
-        command:
-        - longhorn-manager
-        - -d
-        - daemon
-        - --engine-image
-    {{- if .Values.privateRegistry.registryUrl }}
-        - "{{ .Values.privateRegistry.registryUrl }}/{{ .Values.image.longhorn.engine }}:{{ .Values.image.longhorn.engineTag }}"
-    {{- else }}
-        - "{{ .Values.image.longhorn.engine }}:{{ .Values.image.longhorn.engineTag }}"
-    {{- end }}
-        - --instance-manager-image
-    {{- if .Values.privateRegistry.registryUrl }}
-        - "{{ .Values.privateRegistry.registryUrl }}/{{ .Values.image.longhorn.instanceManager }}:{{ .Values.image.longhorn.instanceManagerTag }}"
-    {{- else }}
-        - "{{ .Values.image.longhorn.instanceManager }}:{{ .Values.image.longhorn.instanceManagerTag }}"
-    {{- end }}
-        - --manager-image
-    {{- if .Values.privateRegistry.registryUrl }}
-        - "{{ .Values.privateRegistry.registryUrl }}/{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- else }}
-        - "{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- end }}
-        - --service-account
-        - longhorn-service-account
-        ports:
-        - containerPort: 9500
-          name: manager
-        readinessProbe:
-          tcpSocket:
-            port: 9500
-        volumeMounts:
-        - name: dev
-          mountPath: /host/dev/
-        - name: proc
-          mountPath: /host/proc/
-        - name: varrun
-          mountPath: /var/run/
-          mountPropagation: Bidirectional
-        - name: longhorn
-          mountPath: /var/lib/longhorn/
-          mountPropagation: Bidirectional
-        - name: longhorn-default-setting
-          mountPath: /var/lib/longhorn-setting/
-        env:
-        - name: POD_NAMESPACE
-          valueFrom:
-            fieldRef:
-              fieldPath: metadata.namespace
-        - name: POD_IP
-          valueFrom:
-            fieldRef:
-              fieldPath: status.podIP
-        - name: NODE_NAME
-          valueFrom:
-            fieldRef:
-              fieldPath: spec.nodeName
-        - name: DEFAULT_SETTING_PATH
-          value: /var/lib/longhorn-setting/default-setting.yaml
-      volumes:
-      - name: dev
-        hostPath:
-          path: /dev/
-      - name: proc
-        hostPath:
-          path: /proc/
-      - name: varrun
-        hostPath:
-          path: /var/run/
-      - name: longhorn
-        hostPath:
-          path: /var/lib/longhorn/
-      - name: longhorn-default-setting
-        configMap:
-          name: longhorn-default-setting
-      {{- if .Values.defaultSettings.registrySecret }}
-      imagePullSecrets:
-      - name: {{ .Values.defaultSettings.registrySecret }}
-      {{- end }}
-      serviceAccountName: longhorn-service-account
-  updateStrategy:
-    rollingUpdate:
-      maxUnavailable: "100%"
----
-apiVersion: v1
-kind: Service
-metadata:
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-    app: longhorn-manager
-  name: longhorn-backend
-  namespace: {{ .Release.Namespace }}
-spec:
-  type: {{ .Values.service.manager.type }}
-  sessionAffinity: ClientIP
-  selector:
-    app: longhorn-manager
-  ports:
-  - name: manager
-    port: 9500
-    targetPort: manager
-    {{- if .Values.service.manager.nodePort }}
-    nodePort: {{ .Values.service.manager.nodePort }}
-    {{- end }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/default-setting.yaml packages/longhorn-crd/charts/templates/default-setting.yaml
--- packages/longhorn-crd/charts-original/templates/default-setting.yaml
+++ packages/longhorn-crd/charts/templates/default-setting.yaml
@@ -1,28 +0,0 @@
-apiVersion: v1
-kind: ConfigMap
-metadata:
-  name: longhorn-default-setting
-  namespace: {{ .Release.Namespace }}
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-data:
-  default-setting.yaml: |-
-    backup-target: {{ .Values.defaultSettings.backupTarget }}
-    backup-target-credential-secret: {{ .Values.defaultSettings.backupTargetCredentialSecret }}
-    create-default-disk-labeled-nodes: {{ .Values.defaultSettings.createDefaultDiskLabeledNodes }}
-    default-data-path: {{ .Values.defaultSettings.defaultDataPath }}
-    replica-soft-anti-affinity: {{ .Values.defaultSettings.replicaSoftAntiAffinity }}
-    storage-over-provisioning-percentage: {{ .Values.defaultSettings.storageOverProvisioningPercentage }}
-    storage-minimal-available-percentage: {{ .Values.defaultSettings.storageMinimalAvailablePercentage }}
-    upgrade-checker: {{ .Values.defaultSettings.upgradeChecker }}
-    default-replica-count: {{ .Values.defaultSettings.defaultReplicaCount }}
-    guaranteed-engine-cpu: {{ .Values.defaultSettings.guaranteedEngineCPU }}
-    default-longhorn-static-storage-class: {{ .Values.defaultSettings.defaultLonghornStaticStorageClass }}
-    backupstore-poll-interval: {{ .Values.defaultSettings.backupstorePollInterval }}
-    taint-toleration: {{ .Values.defaultSettings.taintToleration }}
-    priority-class: {{ .Values.defaultSettings.priorityClass }}
-    registry-secret: {{ .Values.defaultSettings.registrySecret }}
-    auto-salvage: {{ .Values.defaultSettings.autoSalvage }}
-    disable-scheduling-on-cordoned-node: {{ .Values.defaultSettings.disableSchedulingOnCordonedNode }}
-    replica-zone-soft-anti-affinity: {{ .Values.defaultSettings.replicaZoneSoftAntiAffinity }}
-    volume-attachment-recovery-policy: {{ .Values.defaultSettings.volumeAttachmentRecoveryPolicy }}
-    mkfs-ext4-parameters: {{ .Values.defaultSettings.mkfsExt4Parameters  }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/deployment-driver.yaml packages/longhorn-crd/charts/templates/deployment-driver.yaml
--- packages/longhorn-crd/charts-original/templates/deployment-driver.yaml
+++ packages/longhorn-crd/charts/templates/deployment-driver.yaml
@@ -1,115 +0,0 @@
-apiVersion: apps/v1
-kind: Deployment
-metadata:
-  name: longhorn-driver-deployer
-  namespace: {{ .Release.Namespace }}
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-spec:
-  replicas: 1
-  selector:
-    matchLabels:
-      app: longhorn-driver-deployer
-  template:
-    metadata:
-      labels: {{- include "longhorn.labels" . | nindent 8 }}
-        app: longhorn-driver-deployer
-    spec:
-      initContainers:
-        - name: wait-longhorn-manager
-      {{- if .Values.privateRegistry.registryUrl }}
-          image: {{ printf "%s/%s:%s" .Values.privateRegistry.registryUrl .Values.image.longhorn.manager .Values.image.longhorn.managerTag | quote }}
-      {{- else }}
-          image: {{ printf "%s:%s" .Values.image.longhorn.manager .Values.image.longhorn.managerTag | quote }}
-      {{- end }}
-          command: ['sh', '-c', 'while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1) != "200" ]; do echo waiting; sleep 2; done']
-      containers:
-        - name: longhorn-driver-deployer
-      {{- if .Values.privateRegistry.registryUrl }}
-          image: {{ printf "%s/%s:%s" .Values.privateRegistry.registryUrl .Values.image.longhorn.manager .Values.image.longhorn.managerTag | quote }}
-      {{- else }}
-          image: {{ printf "%s:%s" .Values.image.longhorn.manager .Values.image.longhorn.managerTag | quote }}
-      {{- end }}
-          imagePullPolicy: IfNotPresent
-          command:
-          - longhorn-manager
-          - -d
-          - deploy-driver
-          - --manager-image
-      {{- if .Values.privateRegistry.registryUrl }}
-          - {{ printf "%s/%s:%s" .Values.privateRegistry.registryUrl .Values.image.longhorn.manager .Values.image.longhorn.managerTag | quote }}
-      {{- else }}
-          - {{ printf "%s:%s" .Values.image.longhorn.manager .Values.image.longhorn.managerTag | quote }}
-      {{- end }}
-          - --manager-url
-          - http://longhorn-backend:9500/v1
-          env:
-          - name: POD_NAMESPACE
-            valueFrom:
-              fieldRef:
-                fieldPath: metadata.namespace
-          - name: NODE_NAME
-            valueFrom:
-              fieldRef:
-                fieldPath: spec.nodeName
-          - name: SERVICE_ACCOUNT
-            valueFrom:
-              fieldRef:
-                fieldPath: spec.serviceAccountName
-          {{- if .Values.csi.kubeletRootDir }}
-          - name: KUBELET_ROOT_DIR
-            value: {{ .Values.csi.kubeletRootDir }}
-          {{- end }}
-      {{- if .Values.privateRegistry.registryUrl }}
-          {{- if and .Values.csi.attacherImage .Values.csi.attacherImageTag }}
-          - name: CSI_ATTACHER_IMAGE
-            value: {{ printf "%s/%s:%s" .Values.privateRegistry.registryUrl .Values.csi.attacherImage .Values.csi.attacherImageTag | quote }}
-          {{- end }}
-          {{- if and .Values.csi.provisionerImage .Values.csi.provisionerImageTag }}
-          - name: CSI_PROVISIONER_IMAGE
-            value: {{ printf "%s/%s:%s" .Values.privateRegistry.registryUrl .Values.csi.provisionerImage .Values.csi.provisionerImageTag | quote }}
-          {{- end }}
-          {{- if and .Values.csi.nodeDriverRegistrarImage .Values.csi.nodeDriverRegistrarImageTag }}
-          - name: CSI_NODE_DRIVER_REGISTRAR_IMAGE
-            value: {{ printf "%s/%s:%s" .Values.privateRegistry.registryUrl .Values.csi.nodeDriverRegistrarImage .Values.csi.nodeDriverRegistrarImageTag | quote }}
-          {{- end }}
-          {{- if and .Values.csi.resizerImage .Values.csi.resizerImageTag }}
-          - name: CSI_RESIZER_IMAGE
-            value: {{ printf "%s/%s:%s" .Values.privateRegistry.registryUrl .Values.csi.resizerImage .Values.csi.resizerImageTag | quote }}
-          {{- end }}
-      {{- else }}
-          {{- if and .Values.csi.attacherImage .Values.csi.attacherImageTag }}
-          - name: CSI_ATTACHER_IMAGE
-            value: {{ printf "%s:%s" .Values.csi.attacherImage .Values.csi.attacherImageTag | quote }}
-          {{- end }}
-          {{- if and .Values.csi.provisionerImage .Values.csi.provisionerImageTag }}
-          - name: CSI_PROVISIONER_IMAGE
-            value: {{ printf "%s:%s" .Values.csi.provisionerImage .Values.csi.provisionerImageTag | quote }}
-          {{- end }}
-          {{- if and .Values.csi.nodeDriverRegistrarImage .Values.csi.nodeDriverRegistrarImageTag }}
-          - name: CSI_NODE_DRIVER_REGISTRAR_IMAGE
-            value: {{ printf "%s:%s" .Values.csi.nodeDriverRegistrarImage .Values.csi.nodeDriverRegistrarImageTag | quote }}
-          {{- end }}
-          {{- if and .Values.csi.resizerImage .Values.csi.resizerImageTag }}
-          - name: CSI_RESIZER_IMAGE
-            value: {{ printf "%s:%s" .Values.csi.resizerImage .Values.csi.resizerImageTag | quote }}
-          {{- end }}
-      {{- end }}
-          {{- if .Values.csi.attacherReplicaCount }}
-          - name: CSI_ATTACHER_REPLICA_COUNT
-            value: {{ .Values.csi.attacherReplicaCount | quote }}
-          {{- end }}
-          {{- if .Values.csi.provisionerReplicaCount }}
-          - name: CSI_PROVISIONER_REPLICA_COUNT
-            value: {{ .Values.csi.provisionerReplicaCount | quote }}
-          {{- end }}
-          {{- if .Values.csi.resizerReplicaCount }}
-          - name: CSI_RESIZER_REPLICA_COUNT
-            value: {{ .Values.csi.resizerReplicaCount | quote }}
-          {{- end }}
-      {{- if .Values.defaultSettings.registrySecret }}
-      imagePullSecrets:
-      - name: {{ .Values.defaultSettings.registrySecret }}
-      {{- end }}
-      serviceAccountName: longhorn-service-account
-      securityContext:
-        runAsUser: 0
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/deployment-ui.yaml packages/longhorn-crd/charts/templates/deployment-ui.yaml
--- packages/longhorn-crd/charts-original/templates/deployment-ui.yaml
+++ packages/longhorn-crd/charts/templates/deployment-ui.yaml
@@ -1,65 +0,0 @@
-apiVersion: apps/v1
-kind: Deployment
-metadata:
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-    app: longhorn-ui
-  name: longhorn-ui
-  namespace: {{ .Release.Namespace }}
-spec:
-  replicas: 1
-  selector:
-    matchLabels:
-      app: longhorn-ui
-  template:
-    metadata:
-      labels: {{- include "longhorn.labels" . | nindent 8 }}
-        app: longhorn-ui
-    spec:
-      containers:
-      - name: longhorn-ui
-    {{- if .Values.privateRegistry.registryUrl }}
-        image: "{{ .Values.privateRegistry.registryUrl }}/{{ .Values.image.longhorn.ui }}:{{ .Values.image.longhorn.uiTag }}"
-    {{- else }}
-        image: "{{ .Values.image.longhorn.ui }}:{{ .Values.image.longhorn.uiTag }}"
-    {{- end }}
-        imagePullPolicy: IfNotPresent
-        securityContext:
-          runAsUser: 0
-        ports:
-        - containerPort: 8000
-          name: http
-        env:
-          - name: LONGHORN_MANAGER_IP
-            value: "http://longhorn-backend:9500"
-      {{- if .Values.defaultSettings.registrySecret }}
-      imagePullSecrets:
-      - name: {{ .Values.defaultSettings.registrySecret }}
-      {{- end }}
----
-kind: Service
-apiVersion: v1
-metadata:
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-    app: longhorn-ui
-    {{- if eq .Values.service.ui.type "Rancher-Proxy" }}
-    kubernetes.io/cluster-service: "true"
-    {{- end }}
-  name: longhorn-frontend
-  namespace: {{ .Release.Namespace }}
-spec:
-  {{- if eq .Values.service.ui.type "Rancher-Proxy" }}
-  type: ClusterIP
-  {{- else }}
-  type: {{ .Values.service.ui.type }}
-  {{- end }}
-  selector:
-    app: longhorn-ui
-  ports:
-  - name: http
-    port: 80
-    targetPort: http
-    {{- if .Values.service.ui.nodePort }}
-    nodePort: {{ .Values.service.ui.nodePort }}
-    {{- else }}
-    nodePort: null
-    {{- end }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/ingress.yaml packages/longhorn-crd/charts/templates/ingress.yaml
--- packages/longhorn-crd/charts-original/templates/ingress.yaml
+++ packages/longhorn-crd/charts/templates/ingress.yaml
@@ -1,30 +0,0 @@
-{{- if .Values.ingress.enabled }}
-apiVersion: extensions/v1beta1
-kind: Ingress
-metadata:
-  name: longhorn-ingress
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-    app: longhorn-ingress
-  annotations:
-    {{- if .Values.ingress.tls }}
-    ingress.kubernetes.io/secure-backends: "true"
-    {{- end }}
-    {{- range $key, $value := .Values.ingress.annotations }}
-    {{ $key }}: {{ $value | quote }}
-    {{- end }}
-spec:
-  rules:
-  - host: {{ .Values.ingress.host }}
-    http:
-      paths:
-        - path: {{ default "" .Values.ingress.path }}
-          backend:
-            serviceName: longhorn-frontend
-            servicePort: 80
-{{- if .Values.ingress.tls }}
-  tls:
-  - hosts:
-    - {{ .Values.ingress.host }}
-    secretName: {{ .Values.ingress.tlsSecret }}
-{{- end }}
-{{- end }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/postupgrade-job.yaml packages/longhorn-crd/charts/templates/postupgrade-job.yaml
--- packages/longhorn-crd/charts-original/templates/postupgrade-job.yaml
+++ packages/longhorn-crd/charts/templates/postupgrade-job.yaml
@@ -1,39 +0,0 @@
-apiVersion: batch/v1
-kind: Job
-metadata:
-  annotations:
-    "helm.sh/hook": post-upgrade
-    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
-  name: longhorn-post-upgrade
-  namespace: {{ .Release.Namespace }}
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-spec:
-  activeDeadlineSeconds: 900
-  backoffLimit: 1
-  template:
-    metadata:
-      name: longhorn-post-upgrade
-      labels: {{- include "longhorn.labels" . | nindent 8 }}
-    spec:
-      containers:
-      - name: longhorn-post-upgrade
-    {{- if .Values.privateRegistry.registryUrl }}
-        image: "{{ .Values.privateRegistry.registryUrl }}/{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- else }}
-        image: "{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- end }}
-        imagePullPolicy: Always
-        command:
-        - longhorn-manager
-        - post-upgrade
-        env:
-        - name: POD_NAMESPACE
-          valueFrom:
-            fieldRef:
-              fieldPath: metadata.namespace
-      restartPolicy: OnFailure
-      {{- if .Values.defaultSettings.registrySecret }}
-      imagePullSecrets:
-      - name: {{ .Values.defaultSettings.registrySecret }}
-      {{- end }}
-      serviceAccountName: longhorn-service-account
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/psp.yaml packages/longhorn-crd/charts/templates/psp.yaml
--- packages/longhorn-crd/charts-original/templates/psp.yaml
+++ packages/longhorn-crd/charts/templates/psp.yaml
@@ -1,66 +0,0 @@
-{{- if .Values.enablePSP }}
-apiVersion: policy/v1beta1
-kind: PodSecurityPolicy
-metadata:
-  name: longhorn-psp
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-spec:
-  privileged: true
-  allowPrivilegeEscalation: true
-  requiredDropCapabilities:
-  - NET_RAW
-  allowedCapabilities:
-  - SYS_ADMIN
-  hostNetwork: false
-  hostIPC: false
-  hostPID: true
-  runAsUser:
-    rule: RunAsAny
-  seLinux:
-    rule: RunAsAny
-  fsGroup:
-    rule: RunAsAny
-  supplementalGroups:
-    rule: RunAsAny
-  volumes:
-  - configMap
-  - downwardAPI
-  - emptyDir
-  - secret
-  - projected
-  - hostPath
----
-apiVersion: rbac.authorization.k8s.io/v1
-kind: Role
-metadata:
-  name: longhorn-psp-role
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-  namespace: {{ .Release.Namespace }}
-rules:
-- apiGroups:
-  - policy
-  resources:
-  - podsecuritypolicies
-  verbs:
-  - use
-  resourceNames:
-  - longhorn-psp
----
-apiVersion: rbac.authorization.k8s.io/v1
-kind: RoleBinding
-metadata:
-  name: longhorn-psp-binding
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-  namespace: {{ .Release.Namespace }}
-roleRef:
-  apiGroup: rbac.authorization.k8s.io
-  kind: Role
-  name: longhorn-psp-role
-subjects:
-- kind: ServiceAccount
-  name: longhorn-service-account
-  namespace: {{ .Release.Namespace }}
-- kind: ServiceAccount
-  name: default
-  namespace: {{ .Release.Namespace }}
-{{- end }}
\ No newline at end of file
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/registry-secret.yml packages/longhorn-crd/charts/templates/registry-secret.yml
--- packages/longhorn-crd/charts-original/templates/registry-secret.yml
+++ packages/longhorn-crd/charts/templates/registry-secret.yml
@@ -1,10 +0,0 @@
-{{- if .Values.defaultSettings.registrySecret }}
-apiVersion: v1
-kind: Secret
-metadata:
-  name: {{ .Values.defaultSettings.registrySecret }}
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-type: kubernetes.io/dockerconfigjson
-data:
-  .dockerconfigjson: {{ template "secret" . }}
-{{- end }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/serviceaccount.yaml packages/longhorn-crd/charts/templates/serviceaccount.yaml
--- packages/longhorn-crd/charts-original/templates/serviceaccount.yaml
+++ packages/longhorn-crd/charts/templates/serviceaccount.yaml
@@ -1,6 +0,0 @@
-apiVersion: v1
-kind: ServiceAccount
-metadata:
-  name: longhorn-service-account
-  namespace: {{ .Release.Namespace }}
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/storageclass.yaml packages/longhorn-crd/charts/templates/storageclass.yaml
--- packages/longhorn-crd/charts-original/templates/storageclass.yaml
+++ packages/longhorn-crd/charts/templates/storageclass.yaml
@@ -1,14 +0,0 @@
-kind: StorageClass
-apiVersion: storage.k8s.io/v1
-metadata:
-  name: longhorn
-  annotations:
-    storageclass.kubernetes.io/is-default-class: {{ .Values.persistence.defaultClass | quote }}
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-provisioner: driver.longhorn.io
-allowVolumeExpansion: true
-parameters:
-  numberOfReplicas: "{{ .Values.persistence.defaultClassReplicaCount }}"
-  staleReplicaTimeout: "30"
-  fromBackup: ""
-  baseImage: ""
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/tls-secrets.yaml packages/longhorn-crd/charts/templates/tls-secrets.yaml
--- packages/longhorn-crd/charts-original/templates/tls-secrets.yaml
+++ packages/longhorn-crd/charts/templates/tls-secrets.yaml
@@ -1,15 +0,0 @@
-{{- if .Values.ingress.enabled }}
-{{- range .Values.ingress.secrets }}
-apiVersion: v1
-kind: Secret
-metadata:
-  name: longhorn
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-    app: longhorn
-type: kubernetes.io/tls
-data:
-  tls.crt: {{ .certificate | b64enc }}
-  tls.key: {{ .key | b64enc }}
----
-{{- end }}
-{{- end }}
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/templates/uninstall-job.yaml packages/longhorn-crd/charts/templates/uninstall-job.yaml
--- packages/longhorn-crd/charts-original/templates/uninstall-job.yaml
+++ packages/longhorn-crd/charts/templates/uninstall-job.yaml
@@ -1,40 +0,0 @@
-apiVersion: batch/v1
-kind: Job
-metadata:
-  annotations:
-    "helm.sh/hook": pre-delete
-    "helm.sh/hook-delete-policy": hook-succeeded
-  name: longhorn-uninstall
-  namespace: {{ .Release.Namespace }}
-  labels: {{- include "longhorn.labels" . | nindent 4 }}
-spec:
-  activeDeadlineSeconds: 900
-  backoffLimit: 1
-  template:
-    metadata:
-      name: longhorn-uninstall
-      labels: {{- include "longhorn.labels" . | nindent 8 }}
-    spec:
-      containers:
-      - name: longhorn-uninstall
-    {{- if .Values.privateRegistry.registryUrl }}
-        image: "{{ .Values.privateRegistry.registryUrl }}/{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- else }}
-        image: "{{ .Values.image.longhorn.manager }}:{{ .Values.image.longhorn.managerTag }}"
-    {{- end }}
-        imagePullPolicy: Always
-        command:
-        - longhorn-manager
-        - uninstall
-        - --force
-        env:
-        - name: LONGHORN_NAMESPACE
-          valueFrom:
-            fieldRef:
-              fieldPath: metadata.namespace
-      restartPolicy: OnFailure
-      {{- if .Values.defaultSettings.registrySecret }}
-      imagePullSecrets:
-      - name: {{ .Values.defaultSettings.registrySecret }}
-      {{- end }}
-      serviceAccountName: longhorn-service-account
diff -x '*.tgz' -x '*.lock' -uNr packages/longhorn-crd/charts-original/values.yaml packages/longhorn-crd/charts/values.yaml
--- packages/longhorn-crd/charts-original/values.yaml
+++ packages/longhorn-crd/charts/values.yaml
@@ -1,123 +0,0 @@
-# Default values for longhorn.
-# This is a YAML-formatted file.
-# Declare variables to be passed into your templates.
-image:
-  longhorn:
-    engine: longhornio/longhorn-engine
-    engineTag: v1.0.2
-    manager: longhornio/longhorn-manager
-    managerTag: v1.0.2
-    ui: longhornio/longhorn-ui
-    uiTag: v1.0.2
-    instanceManager: longhornio/longhorn-instance-manager
-    instanceManagerTag: v1_20200514
-  pullPolicy: IfNotPresent
-
-service:
-  ui:
-    type: ClusterIP
-    nodePort: null
-  manager:
-    type: ClusterIP
-    nodePort: ""
-
-persistence:
-  defaultClass: true
-  defaultClassReplicaCount: 3
-
-csi:
-  attacherImage: longhornio/csi-attacher
-  attacherImageTag: v2.0.0
-  provisionerImage: longhornio/csi-provisioner
-  provisionerImageTag: v1.4.0
-  nodeDriverRegistrarImage: longhornio/csi-node-driver-registrar
-  nodeDriverRegistrarImageTag: v1.2.0
-  resizerImage: longhornio/csi-resizer
-  resizerImageTag: v0.3.0
-  kubeletRootDir: ~
-  attacherReplicaCount: ~
-  provisionerReplicaCount: ~
-  resizerReplicaCount: ~
-
-defaultSettings:
-  backupTarget: ~
-  backupTargetCredentialSecret: ~
-  createDefaultDiskLabeledNodes: ~
-  defaultDataPath: ~
-  replicaSoftAntiAffinity: ~
-  storageOverProvisioningPercentage: ~
-  storageMinimalAvailablePercentage: ~
-  upgradeChecker: ~
-  defaultReplicaCount: ~
-  guaranteedEngineCPU: ~
-  defaultLonghornStaticStorageClass: ~
-  backupstorePollInterval: ~
-  taintToleration: ~
-  priorityClass: ~
-  registrySecret: ~
-  autoSalvage: ~
-  disableSchedulingOnCordonedNode: ~
-  replicaZoneSoftAntiAffinity: ~
-  volumeAttachmentRecoveryPolicy: ~
-  mkfsExt4Parameters: ~
-
-privateRegistry:
-  registryUrl: ~
-  registryUser: ~
-  registryPasswd: ~
-
-resources: {}
-  # We usually recommend not to specify default resources and to leave this as a conscious
-  # choice for the user. This also increases chances charts run on environments with little
-  # resources, such as Minikube. If you do want to specify resources, uncomment the following
-  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
-  # limits:
-  #  cpu: 100m
-  #  memory: 128Mi
-  # requests:
-  #  cpu: 100m
-  #  memory: 128Mi
-  #
-
-ingress:
-  ## Set to true to enable ingress record generation
-  enabled: false
-
-
-  host: xip.io
-
-  ## Set this to true in order to enable TLS on the ingress record
-  ## A side effect of this will be that the backend service will be connected at port 443
-  tls: false
-
-  ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
-  tlsSecret: longhorn.local-tls
-
-  ## Ingress annotations done as key:value pairs
-  ## If you're using kube-lego, you will want to add:
-  ## kubernetes.io/tls-acme: true
-  ##
-  ## For a full list of possible ingress annotations, please see
-  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
-  ##
-  ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
-  annotations:
-  #  kubernetes.io/ingress.class: nginx
-  #  kubernetes.io/tls-acme: true
-
-  secrets:
-  ## If you're providing your own certificates, please use this to add the certificates as secrets
-  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
-  ## -----BEGIN RSA PRIVATE KEY-----
-  ##
-  ## name should line up with a tlsSecret set further up
-  ## If you're using kube-lego, this is unneeded, as it will create the secret for you if it is not set
-  ##
-  ## It is also possible to create and manage the certificates outside of this helm chart
-  ## Please see README.md for more information
-  # - name: longhorn.local-tls
-  #   key:
-  #   certificate:
-
-# Configure a pod security policy in the Longhorn namespace to allow privileged pods
-enablePSP: true
